The Lexo Prompting Playbook - Enhanced Edition
A Production-Grade Framework for AI-Driven Legal Practice Application Development
This document contains the complete, production-grade set of prompts for building the lexo application - a practice intelligence platform for South African advocates. These prompts are designed for flawless execution with comprehensive type safety, error handling, and performance optimization.
Phase 1: The Master Prompt (Execute First)
Objective
Generate the foundational code for the 'lexo' web application with complete type safety, comprehensive error handling, accessibility compliance, and a scalable architecture.

// AI_TASK: Generate the foundational code for the 'lexo' web application with production-grade architecture, comprehensive type definitions, and the Mpondo Design System.

// --- 1. PROJECT STRUCTURE & DEPENDENCIES ---
// AI_ACTION: Create the following project structure with all necessary configuration files.
/*
Project Structure:
/src
/components
/ui           // Reusable UI primitives
/shared       // Shared business components
/layout       // Layout components
/hooks          // Custom React hooks
/pages          // Page components
/lib
/api          // API clients and data fetching
/utils        // Utility functions
/constants    // Application constants
/validators   // Form validation schemas
/types          // TypeScript type definitions
/contexts       // React contexts
/services       // Business logic services
App.tsx
index.css
main.tsx
vite-env.d.ts
/public
favicon.ico
.env.example
.gitignore
index.html
package.json
postcss.config.js
tailwind.config.js
tsconfig.json
tsconfig.node.json
vite.config.ts
README.md
/
// --- 2. PACKAGE.JSON WITH ALL DEPENDENCIES ---
// AI_TARGET_FILE: package.json
// AI_EXPECTATIONS:
/
{
"name": "lexo",
"version": "1.0.0",
"type": "module",
"scripts": {
"dev": "vite",
"build": "tsc && vite build",
"preview": "vite preview",
"type-check": "tsc --noEmit",
"lint": "eslint . --ext ts,tsx --report-unused-disable-directives"
},
"dependencies": {
"react": "^18.2.0",
"react-dom": "^18.2.0",
"lucide-react": "^0.263.1",
"@supabase/supabase-js": "^2.38.0",
"recharts": "^2.8.0",
"date-fns": "^2.30.0",
"clsx": "^2.0.0",
"react-hot-toast": "^2.4.1",
"@tanstack/react-query": "^5.0.0",
"zod": "^3.22.0",
"react-hook-form": "^7.47.0",
"@hookform/resolvers": "^3.3.0"
},
"devDependencies": {
"@types/react": "^18.2.37",
"@types/react-dom": "^18.2.15",
"@typescript-eslint/eslint-plugin": "^6.10.0",
"@typescript-eslint/parser": "^6.10.0",
"@vitejs/plugin-react": "^4.1.0",
"autoprefixer": "^10.4.16",
"eslint": "^8.53.0",
"eslint-plugin-react-hooks": "^4.6.0",
"eslint-plugin-react-refresh": "^0.4.4",
"postcss": "^8.4.31",
"tailwindcss": "^3.3.5",
"typescript": "^5.2.2",
"vite": "^5.0.0"
}
}
/
// --- 3. COMPREHENSIVE TYPE DEFINITIONS ---
// AI_TARGET_FILE: src/types/index.ts
// AI_EXPECTATIONS: Create comprehensive type definitions with proper enums and interfaces
/
// Navigation Types
export type Page =
| 'dashboard'
| 'matters'
| 'invoices'
| 'reports'
| 'practice-growth'
| 'settings'
| 'design-system'
| 'matter-details';
export type ModalType =
| 'new-brief'
| 'voice-capture'
| 'edit-matter'
| 'confirm-delete'
| null;
// Bar Association Enum
export enum Bar {
JOHANNESBURG = 'Johannesburg',
CAPE_TOWN = 'Cape Town'
}
// Matter Status Enum
export enum MatterStatus {
ACTIVE = 'Active',
PENDING = 'Pending',
SETTLED = 'Settled',
CLOSED = 'Closed'
}
// Invoice Status Enum
export enum InvoiceStatus {
PAID = 'Paid',
UNPAID = 'Unpaid',
OVERDUE = 'Overdue',
PENDING = 'Pending'
}
// Core Business Entities
export interface Matter {
id: string;
title: string;
clientName: string;
clientEmail?: string;
clientPhone?: string;
instructingAttorney: string;
instructingAttorneyEmail?: string;
instructingFirm?: string;
wipValue: number;
estimatedFee?: number;
actualFee?: number;
status: MatterStatus;
dateCreated: string; // ISO 8601
dateModified: string; // ISO 8601
dateClosed?: string; // ISO 8601
bar: Bar;
briefType: string;
description?: string;
conflictCheckCompleted: boolean;
conflictCheckDate?: string;
documents?: Document[];
timeEntries?: TimeEntry[];
notes?: Note[];
tags?: string[];
riskLevel?: 'Low' | 'Medium' | 'High';
settlementProbability?: number;
}
export interface Invoice {
id: string;
invoiceNumber: string;
matterId: string;
matterTitle: string;
clientName: string;
amount: number;
vatAmount: number;
totalAmount: number;
dateIssued: string; // ISO 8601
dateDue: string; // ISO 8601 - calculated based on bar rules
datePaid?: string; // ISO 8601
status: InvoiceStatus;
bar: Bar;
paymentMethod?: 'EFT' | 'Cheque' | 'Cash' | 'Card';
remindersSent: number;
lastReminderDate?: string;
notes?: string;
}
export interface TimeEntry {
id: string;
matterId: string;
date: string; // ISO 8601
duration: number; // in minutes
description: string;
rate: number;
amount: number;
billed: boolean;
invoiceId?: string;
recordedBy: string;
recordingMethod: 'Manual' | 'Voice' | 'Timer';
createdAt: string;
modifiedAt?: string;
}
export interface User {
id: string;
email: string;
fullName: string;
initials: string;
bar: Bar;
practiceNumber: string;
yearAdmitted: number;
specialisations: string[];
hourlyRate: number;
phoneNumber?: string;
avatar?: string;
settings: UserSettings;
}
export interface UserSettings {
notifications: {
email: boolean;
whatsapp: boolean;
invoiceReminders: boolean;
matterUpdates: boolean;
weeklyReports: boolean;
};
theme: 'light' | 'dark' | 'system';
language: 'en' | 'af';
timezone: string;
dateFormat: string;
}
// Application State
export interface AppState {
// User & Auth
user: User | null;
isAuthenticated: boolean;
// Navigation
activePage: Page;
activeModal: ModalType;
viewingMatterId: string | null;
// UI State
sidebarOpen: boolean;
isLoading: boolean;
globalError: Error | null;
// Data Cache
matters: Matter[];
invoices: Invoice[];
timeEntries: TimeEntry[];
// Filters & Sorting
filters: {
matters: MatterFilters;
invoices: InvoiceFilters;
};
sorting: {
matters: SortConfig<Matter>;
invoices: SortConfig<Invoice>;
};
// Pagination
pagination: {
matters: PaginationConfig;
invoices: PaginationConfig;
};
}
export interface MatterFilters {
status?: MatterStatus[];
bar?: Bar[];
dateRange?: { start: string; end: string };
search?: string;
minWipValue?: number;
maxWipValue?: number;
attorney?: string;
hasConflictCheck?: boolean;
}
export interface InvoiceFilters {
status?: InvoiceStatus[];
bar?: Bar[];
dateRange?: { start: string; end: string };
search?: string;
minAmount?: number;
maxAmount?: number;
isOverdue?: boolean;
}
export interface SortConfig<T> {
field: keyof T;
direction: 'asc' | 'desc';
}
export interface PaginationConfig {
page: number;
pageSize: number;
total: number;
totalPages: number;
}
// API Response Types
export interface ApiResponse<T> {
data: T;
error: null;
meta?: {
pagination?: PaginationConfig;
timestamp: string;
};
}
export interface ApiError {
data: null;
error: {
message: string;
code?: string;
details?: Record<string, any>;
};
}
// Form Types
export interface NewMatterForm {
title: string;
clientName: string;
clientEmail?: string;
clientPhone?: string;
instructingAttorney: string;
instructingAttorneyEmail?: string;
instructingFirm?: string;
bar: Bar;
briefType: string;
estimatedFee?: number;
description?: string;
riskLevel: 'Low' | 'Medium' | 'High';
}
export interface NewInvoiceForm {
matterId: string;
amount: number;
vatRate: number;
description: string;
timeEntryIds?: string[];
}
// Analytics Types
export interface PracticeMetrics {
totalWip: number;
totalBilled: number;
totalCollected: number;
outstandingInvoices: number;
overdueInvoices: number;
averageCollectionDays: number;
monthlyBillings: MonthlyBilling[];
workTypeDistribution: WorkTypeDistribution[];
settlementRate: number;
}
export interface MonthlyBilling {
month: string;
year: number;
amount: number;
invoiceCount: number;
collectionRate: number;
}
export interface WorkTypeDistribution {
type: string;
count: number;
value: number;
percentage: number;
}
/
// --- 4. TAILWIND CONFIGURATION (THE MPONDO DESIGN SYSTEM) ---
// AI_TARGET_FILE: tailwind.config.js
// AI_EXPECTATIONS: Create a comprehensive design system with South African legal industry aesthetics
/
import type { Config } from 'tailwindcss'
const config: Config = {
content: [
'./index.html',
'./src/**/.{js,ts,jsx,tsx}',
],
theme: {
extend: {
colors: {
// Primary Brand Color - Mpondo Gold
'mpondo-gold': {
50: '#fdfbf4',
100: '#faf4e1',
200: '#f5e8c3',
300: '#edd597',
400: '#e2bd64',
500: '#D4AF37', // Primary
600: '#b8932a',
700: '#997624',
800: '#7d5f21',
900: '#684e20',
950: '#3b2b0f',
},
// Secondary Brand Color - Judicial Blue
'judicial-blue': {
50: '#f0f5fe',
100: '#dde8fc',
200: '#c3d8fa',
300: '#9ac0f6',
400: '#6a9ef0',
500: '#477aea',
600: '#325cdd',
700: '#2947cb',
800: '#273ba4',
900: '#1E3A8A', // Primary
950: '#1a2554',
},
// Semantic Colors
status: {
success: {
50: '#f0fdf4',
100: '#dcfce7',
200: '#bbf7d0',
300: '#86efac',
400: '#4ade80',
500: '#22c55e',
600: '#16a34a',
700: '#15803d',
800: '#166534',
900: '#14532d',
},
warning: {
50: '#fffbeb',
100: '#fef3c7',
200: '#fde68a',
300: '#fcd34d',
400: '#fbbf24',
500: '#f59e0b',
600: '#d97706',
700: '#b45309',
800: '#92400e',
900: '#78350f',
},
error: {
50: '#fef2f2',
100: '#fee2e2',
200: '#fecaca',
300: '#fca5a5',
400: '#f87171',
500: '#ef4444',
600: '#dc2626',
700: '#b91c1c',
800: '#991b1b',
900: '#7f1d1d',
},
},
// Neutral palette for UI
neutral: {
50: '#fafafa',
100: '#f5f5f5',
200: '#e5e5e5',
300: '#d4d4d4',
400: '#a3a3a3',
500: '#737373',
600: '#525252',
700: '#404040',
800: '#262626',
900: '#171717',
950: '#0a0a0a',
}
},
fontFamily: {
sans: ['Inter', 'system-ui', '-apple-system', 'sans-serif'],
mono: ['JetBrains Mono', 'monospace'],
},
fontSize: {
'2xs': ['0.625rem', { lineHeight: '0.875rem' }],
},
animation: {
'scale-in': 'scaleIn 200ms ease-out',
'slide-up': 'slideUp 300ms ease-out',
'slide-down': 'slideDown 300ms ease-out',
'fade-in': 'fadeIn 200ms ease-out',
'pulse-slow': 'pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite',
},
keyframes: {
scaleIn: {
'0%': { transform: 'scale(0.95)', opacity: '0' },
'100%': { transform: 'scale(1)', opacity: '1' },
},
slideUp: {
'0%': { transform: 'translateY(10px)', opacity: '0' },
'100%': { transform: 'translateY(0)', opacity: '1' },
},
slideDown: {
'0%': { transform: 'translateY(-10px)', opacity: '0' },
'100%': { transform: 'translateY(0)', opacity: '1' },
},
fadeIn: {
'0%': { opacity: '0' },
'100%': { opacity: '1' },
},
},
boxShadow: {
'soft': '0 2px 8px -2px rgb(0 0 0 / 0.1)',
'glow': '0 0 20px -5px rgb(212 175 55 / 0.3)',
},
borderRadius: {
'xl': '1rem',
'2xl': '1.5rem',
},
spacing: {
'18': '4.5rem',
'88': '22rem',
'120': '30rem',
},
zIndex: {
'60': '60',
'70': '70',
'80': '80',
'90': '90',
'100': '100',
},
},
},
plugins: [],
}
export default config
/
// --- 5. GLOBAL STYLES WITH ACCESSIBILITY & PERFORMANCE ---
// AI_TARGET_FILE: src/index.css
// AI_EXPECTATIONS: Create comprehensive global styles with accessibility and performance considerations
/
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=JetBrains+Mono:wght@400;500&display=swap');
@tailwind base;
@tailwind components;
@tailwind utilities;
@layer base {
/ Root Variables for Dynamic Theming /
:root {
--color-primary: theme('colors.mpondo-gold.500');
--color-secondary: theme('colors.judicial-blue.900');
--focus-ring-color: theme('colors.mpondo-gold.400');
--focus-ring-offset: 2px;
--animation-duration: 200ms;
--animation-timing: cubic-bezier(0.4, 0, 0.2, 1);
}
/ Dark Mode Variables (prepare for future) /
[data-theme='dark'] {
--color-primary: theme('colors.mpondo-gold.400');
--color-secondary: theme('colors.judicial-blue.400');
}
/ Base Typography & Colors /
body {
@apply font-sans text-neutral-900 bg-neutral-50 antialiased;
font-feature-settings: 'kern' 1, 'liga' 1;
text-rendering: optimizeLegibility;
-webkit-font-smoothing: antialiased;
-moz-osx-font-smoothing: grayscale;
}
/ Accessible Focus Styles - WCAG 2.1 AA Compliant */
:focus-visible {
@apply outline-none ring-2 ring-mpondo-gold-400 ring-offset-2 ring-offset-white;
transition: box-shadow var(--animation-duration) var(--animation-timing);
}
/ High Contrast Mode Support */
@media (prefers-contrast: high) {
:focus-visible {
@apply ring-4 ring-offset-4;
}
}
/ Reduced Motion Support */
@media (prefers-reduced-motion: reduce) {
*,
*::before,
::after {
animation-duration: 0.01ms !important;
animation-iteration-count: 1 !important;
transition-duration: 0.01ms !important;
scroll-behavior: auto !important;
}
}
/ Print Styles */
@media print {
body {
@apply text-black bg-white;
}

.no-print {
display: none !important;
}
}
/* Scrollbar Styling /
::-webkit-scrollbar {
width: 8px;
height: 8px;
}
::-webkit-scrollbar-track {
@apply bg-neutral-100;
}
::-webkit-scrollbar-thumb {
@apply bg-neutral-400 rounded;
}
::-webkit-scrollbar-thumb:hover {
@apply bg-neutral-500;
}
/ Form Input Defaults /
input, textarea, select {
@apply text-base;
}
/ Prevent iOS Zoom on Input Focus /
input[type="text"],
input[type="email"],
input[type="tel"],
input[type="number"],
input[type="password"],
input[type="date"],
input[type="datetime-local"],
select,
textarea {
font-size: 16px;
}
/ Loading Skeleton Animation /
.skeleton {
@apply bg-gradient-to-r from-neutral-200 via-neutral-100 to-neutral-200 bg-[length:200%_100%] animate-[shimmer_1.5s_ease-in-out_infinite];
}
@keyframes shimmer {
0% { background-position: -200% 0; }
100% { background-position: 200% 0; }
}
}
@layer components {
/ Reusable Component Classes /
.btn-primary {
@apply px-4 py-2 bg-mpondo-gold-500 text-white rounded-lg font-medium
hover:bg-mpondo-gold-600 active:bg-mpondo-gold-700
disabled:opacity-50 disabled:cursor-not-allowed
transition-colors duration-200
focus-visible:ring-2 focus-visible:ring-mpondo-gold-400 focus-visible:ring-offset-2;
}
.btn-secondary {
@apply px-4 py-2 bg-judicial-blue-900 text-white rounded-lg font-medium
hover:bg-judicial-blue-800 active:bg-judicial-blue-700
disabled:opacity-50 disabled:cursor-not-allowed
transition-colors duration-200
focus-visible:ring-2 focus-visible:ring-judicial-blue-400 focus-visible:ring-offset-2;
}
.btn-outline {
@apply px-4 py-2 border-2 border-neutral-300 text-neutral-700 rounded-lg font-medium
hover:border-neutral-400 hover:bg-neutral-50 active:bg-neutral-100
disabled:opacity-50 disabled:cursor-not-allowed
transition-all duration-200
focus-visible:ring-2 focus-visible:ring-neutral-400 focus-visible:ring-offset-2;
}
.input-field {
@apply w-full px-3 py-2 border border-neutral-300 rounded-lg
placeholder:text-neutral-400
hover:border-neutral-400
focus:border-mpondo-gold-500 focus:ring-1 focus:ring-mpondo-gold-500
disabled:bg-neutral-50 disabled:text-neutral-500 disabled:cursor-not-allowed
transition-all duration-200;
}
.card {
@apply bg-white rounded-xl border border-neutral-200 shadow-soft p-6
hover:shadow-md transition-shadow duration-200;
}
.badge {
@apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;
}
.badge-success {
@apply bg-status-success-100 text-status-success-800;
}
.badge-warning {
@apply bg-status-warning-100 text-status-warning-800;
}
.badge-error {
@apply bg-status-error-100 text-status-error-800;
}
/ Data Table Styles /
.table-header {
@apply text-xs font-semibold text-neutral-600 uppercase tracking-wider;
}
.table-row {
@apply border-b border-neutral-200 hover:bg-neutral-50 transition-colors duration-150;
}
/ Modal Overlay /
.modal-overlay {
@apply fixed inset-0 bg-black/50 backdrop-blur-sm z-50;
}
/ Toast Notification Base /
.toast {
@apply flex items-center gap-3 px-4 py-3 rounded-lg shadow-lg;
}
}
@layer utilities {
/ Custom Utilities /
.text-balance {
text-wrap: balance;
}
.animate-in {
animation: fadeIn var(--animation-duration) var(--animation-timing);
}
.animate-out {
animation: fadeOut var(--animation-duration) var(--animation-timing);
}
/ Safe Area Insets for Mobile */
.safe-top {
padding-top: env(safe-area-inset-top);
}
.safe-bottom {
padding-bottom: env(safe-area-inset-bottom);
}
.safe-left {
padding-left: env(safe-area-inset-left);
}
.safe-right {
padding-right: env(safe-area-inset-right);
}
}
/
// --- 6. APPLICATION SHELL WITH ERROR BOUNDARIES ---
// AI_TARGET_FILE: src/App.tsx
// AI_EXPECTATIONS: Create a robust application shell with error handling and performance optimization
/
import React, { useState, useEffect, useCallback, useMemo, lazy, Suspense } from 'react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { Toaster, toast } from 'react-hot-toast';
import type {
AppState,
Page,
ModalType,
Matter,
Invoice,
User
} from './types';

// Placeholder components until they are generated
const MainLayout: React.FC<{ children: React.ReactNode }> = ({ children }) => <div>{children}</div>;
const DashboardPage = lazy(() => Promise.resolve({ default: () => <div>Dashboard Page</div> }));
const MattersPage = lazy(() => Promise.resolve({ default: () => <div>Matters Page</div> }));
const InvoicesPage = lazy(() => Promise.resolve({ default: () => <div>Invoices Page</div> }));

// Create Query Client with proper configuration
const queryClient = new QueryClient({
defaultOptions: {
queries: {
staleTime: 5 * 60 * 1000, // 5 minutes
cacheTime: 10 * 60 * 1000, // 10 minutes
retry: 3,
retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),
refetchOnWindowFocus: false,
},
},
});

// Error Boundary Component
class ErrorBoundary extends React.Component<
{ children: React.ReactNode; fallback?: React.ComponentType<{ error: Error }> },
{ hasError: boolean; error: Error | null }

{
constructor(props: any) {
super(props);
this.state = { hasError: false, error: null };
}
static getDerivedStateFromError(error: Error) {
return { hasError: true, error };
}
componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
console.error('Error boundary caught:', error, errorInfo);
// In a real app, you'd send this to an error reporting service like Sentry
}
render() {
if (this.state.hasError && this.state.error) {
const FallbackComponent = this.props.fallback || DefaultErrorFallback;
return <FallbackComponent error={this.state.error} />;
}
return this.props.children;
}
}

// Default Error Fallback
const DefaultErrorFallback: React.FC<{ error: Error }> = ({ error }) => (

<div className="min-h-screen flex items-center justify-center p-4 bg-neutral-100">
<div className="card max-w-md w-full">
<div className="text-center">
<div className="text-status-error-500 mb-4">
<svg className="w-16 h-16 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
<path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2}
d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
</svg>
</div>
<h1 className="text-2xl font-bold text-neutral-900 mb-2">
Oops! Something went wrong
</h1>
<p className="text-neutral-600 mb-4">
{error.message || 'An unexpected error occurred'}
</p>
<button
onClick={() => window.location.reload()}
className="btn-primary"
aria-label="Reload the application"
>
Reload Application
</button>
</div>
</div>
</div>
);

// Loading Component
const LoadingSpinner: React.FC<{ size?: 'sm' | 'md' | 'lg' }> = ({ size = 'md' }) => {
const sizeClasses = {
sm: 'w-4 h-4',
md: 'w-8 h-8',
lg: 'w-12 h-12'
};
return (

<div className="flex justify-center items-center p-4">
<svg
className={${sizeClasses[size]} animate-spin text-mpondo-gold-500}
fill="none"
viewBox="0 0 24 24"
aria-label="Loading"
>
<circle
className="opacity-25"
cx="12"
cy="12"
r="10"
stroke="currentColor"
strokeWidth="4"
/>
<path
className="opacity-75"
fill="currentColor"
d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
/>
</svg>
</div>
);
};

// Main App Component
function App() {
// Initialize state with proper typing
const [appState, setAppState] = useState<AppState>({
user: null,
isAuthenticated: false,
activePage: 'dashboard',
activeModal: null,
viewingMatterId: null,
sidebarOpen: false,
isLoading: false,
globalError: null,
matters: [],
invoices: [],
timeEntries: [],
filters: {
matters: {},
invoices: {}
},
sorting: {
matters: { field: 'dateCreated', direction: 'desc' },
invoices: { field: 'dateIssued', direction: 'desc' }
},
pagination: {
matters: { page: 1, pageSize: 10, total: 0, totalPages: 0 },
invoices: { page: 1, pageSize: 10, total: 0, totalPages: 0 }
},
});

// A single function to update state, promoting predictability
const updateState = useCallback((updates: Partial<AppState>) => {
setAppState(prevState => ({ ...prevState, ...updates }));
}, []);

// Placeholder for user authentication logic
useEffect(() => {
updateState({ isLoading: true });
// Simulate API call to fetch user
setTimeout(() => {
// On success:
// updateState({ isAuthenticated: true, user: fetchedUser, isLoading: false });
// On failure:
// updateState({ isAuthenticated: false, user: null, isLoading: false });
// For now, we'll just stop loading
updateState({ isLoading: false });
toast.success('Welcome to lexo!');
}, 1500);
}, [updateState]);

const renderActivePage = () => {
switch (appState.activePage) {
case 'dashboard':
return <DashboardPage />;
case 'matters':
return <MattersPage />;
case 'invoices':
return <InvoicesPage />;
// Add other cases for pages as they are built
default:
return <DashboardPage />;
}
};

if (appState.isLoading && !appState.user) {
return (

<div className="min-h-screen flex items-center justify-center">
<LoadingSpinner size="lg" />
</div>
);
}

return (
<ErrorBoundary>
<QueryClientProvider client={queryClient}>
<Toaster
position="bottom-right"
toastOptions={{
className: 'toast',
success: {
iconTheme: {
primary: 'white',
secondary: '#16a34a',
},
style: {
background: '#16a34a',
color: 'white',
},
},
error: {
iconTheme: {
primary: 'white',
secondary: '#dc2626',
},
style: {
background: '#dc2626',
color: 'white',
},
},
}}
/>
<MainLayout>
<Suspense fallback={<LoadingSpinner size="lg" />}>
{renderActivePage()}
</Suspense>
</MainLayout>
</QueryClientProvider>
</ErrorBoundary>
);
}
export default App;
*/

// --- 7. APPLICATION ENTRY POINT ---
// AI_TARGET_FILE: src/main.tsx
// AI_EXPECTATIONS: Create the main entry point to render the React application.
/*
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
<React.StrictMode>
<App />
</React.StrictMode>,
)
*/

// --- 8. BASE HTML DOCUMENT ---
// AI_TARGET_FILE: index.html
// AI_EXPECTATIONS: Create the main HTML file with necessary meta tags and font imports.
/*
<!doctype html>

<html lang="en">
<head>
<meta charset="UTF-8" />
<link rel="icon" type="image/svg+xml" href="/favicon.ico" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="description" content="lexo - The Advocate's Intelligence Platform" />
<title>lexo</title>
</head>
<body>
<div id="root"></div>
<script type="module" src="/src/main.tsx"></script>
</body>
</html>
*/

// --- 9. VITE CONFIGURATION ---
// AI_TARGET_FILE: vite.config.ts
// AI_EXPECTATIONS: Configure Vite with the React plugin and path aliases for clean imports.
/*
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

// https://vitejs.dev/config/
export default defineConfig({
plugins: [react()],
resolve: {
alias: {
"@": path.resolve(__dirname, "./src"),
},
},
})
*/

// --- 10. TYPESCRIPT CONFIGURATION ---
// AI_TARGET_FILE: tsconfig.json
// AI_EXPECTATIONS: Configure TypeScript for a modern React project with strict type checking and path aliases.
/*
{
"compilerOptions": {
"target": "ES2020",
"useDefineForClassFields": true,
"lib": ["ES2020", "DOM", "DOM.Iterable"],
"module": "ESNext",
"skipLibCheck": true,

/* Bundler mode */
"moduleResolution": "bundler",
"allowImportingTsExtensions": true,
"resolveJsonModule": true,
"isolatedModules": true,
"noEmit": true,
"jsx": "react-jsx",

/* Linting */
"strict": true,
"noUnusedLocals": true,
"noUnusedParameters": true,
"noFallthroughCasesInSwitch": true,

/* Path Aliases */
"baseUrl": ".",
"paths": {
  "@/*": ["src/*"]
}

},
"include": ["src"],
"references": [{ "path": "./tsconfig.node.json" }]
}
*/

// --- 11. POSTCSS CONFIGURATION ---
// AI_TARGET_FILE: postcss.config.js
// AI_EXPECTATIONS: Configure PostCSS for Tailwind CSS and Autoprefixer.
/*
export default {
plugins: {
tailwindcss: {},
autoprefixer: {},
},
}
*/

// --- 12. GITIGNORE CONFIGURATION ---
// AI_TARGET_FILE: .gitignore
// AI_EXPECTATIONS: Provide a standard .gitignore file for a Vite/React project.
/*

Logs
logs
.log
npm-debug.log
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9].[0-9].[0-9].[0-9].json

Runtime data
pids
*.pid
*.seed
*.pid.lock

Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

Coverage directory used by tools like istanbul
coverage
*.lcov

nyc test coverage
.nyc_output

Grunt intermediate storage (https://gruntjs.com/)
.grunt

Bower dependency directory (https://bower.io/)
bower_components

node-waf configuration
.lock-wscript

Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

Dependency directories
node_modules/
jspm_packages/

Snowpack dependency directory (https://snowpack.dev/)
web_modules/

TypeScript cache
*.tsbuildinfo

Optional eslint cache
.eslintcache

Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

Optional REPL history
.node_repl_history

Output of 'npm pack'
*.tgz

Yarn Integrity file
.yarn-integrity

dotenv environment variables file
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

Nuxt.js build output
.nuxt
dist

Gatsby files
.cache/

Add storybook build outputs here if needed, e.g.
storybook-static
SvelteKit build output
.svelte-kit
build

Docusaurus build output
.docusaurus

Vite build output
dist

Remastered build output
.remastered

Vercel deployment output
.vercel

StaticDeploy deployment output
.staticdeploy_temp

Mac files
.DS_Store
*/
